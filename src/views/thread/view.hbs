<div id="board-vue">

		<transition>
			<div v-if="!single_thread_mode" class="divided grid" style="margin-top: 1.5em; margin-right: 3em; font-size: 12px; font-weight: normal !important;">
				<h5 class="ui center red inverted top attached header" style="border-radius: 0px; font-family: monospace; padding: 2px;">NEW THREAD</h5>
				<div id="post_box" class="ui center inverted attached segment" style="padding: 2em; border-radius: 0px; height: 207px;">
					<div id="text_input" class="ui inverted form">
						<input id="thread_title" style="border-radius: 0px; color: white; background: #00000052;" @keyup.enter="post_thread" v-model="thread_title" placeholder="Thread Title" type="text">
						<textarea class="inverted" placeholder="Thread Body" style="background: #00000052; color: white; margin-top: 0px; margin-bottom: 0px; height: 112px; border-radius: 0px; font-family: monospace;" v-model="thread_head" @keyup.enter="post_thread"></textarea>
					</div>
					<div id="loader_div">
						<div id="loader" class="ui loader"></div>
					</div>
				</div>
			</div>
		</transition>

		<div v-for="thread in threads"  :key="thread.thread_UUID">
			<div v-bind:id="thread.thread_UUID" class="thread_head divided grid thread-head" style=" margin-right: 3em; margin-top: 1.5em; font-size: 12px; font-weight: normal !important;">
					

				<transition>
					<div v-if="thread.visible">
						<h5 class="ui center red inverted top attached header" style="border-radius: 0px;  padding: 2px; font-size: 12px;font-family: monospace;"> #: ${thread.id} | TIME: ${thread.created} | UUID: ${thread.thread_UUID} <span v-on:click="expand_thread(thread.thread_UUID)" style="float: right;" v-if="!thread.expanded"><i class="plus icon" style="color: white;"></i>
			</span><span v-if="thread.expanded" style="float: right;" v-on:click="expand_thread(thread.thread_UUID)"><i class="minus icon" style="color: white;"></i>
			</span></h5>
						<div class="ui center inverted attached segment" style="border-radius: 0px; padding: 2em; text-align: center; border-bottom: 0px;">
							<p>
								<h3 style="font-family: monospace; margin: 0em;">${thread.title}</h3>
							</p>
						</div>
						<div class="ui center inverted attached segment" style="text-align: center; border-radius: 0px; padding-bottom: 3em;">
							<p>
								${thread.post}
							</p>
						</div>
					</div>
				</transition>
			</div>
		</div>



		<div v-if="false" class="thread_branch ui center inverted attached segment" style="border-radius: 0px; padding: 1em; background-color: transparent; display: inline; border-right: 0px: border-bottom: 0px; padding-bottom: 36em; border-right: 0px; border-bottom: 0px;">
		</div>

		<transition-group>
			<div class="divided grid comment_post" style="margin-top: 1.5em; font-size: 12px; font-weight: normal !important;" :key="comment.comment_UUID" v-for="comment in replies">
				<h5 class="ui center red inverted top attached header" style="border-radius: 0px; font-family: monospace; margin-left: -1px; margin-right: -38px; padding: 2px; font-size: 12px;"> #: ${comment.id} | TIME: ${comment.created} | UUID: ${comment.comment_UUID} </h5>
				<div class="ui center inverted attached segment" style="border-radius: 0px; padding: 2em; margin-left: 36px; margin-right: -38px; text-align: center;">
					<p>
						${comment.post}
					</p>
				</div>
			</div>
		</transition-group>
	
	<transition>
		<div v-if="post_comment_box" class="divided grid" style="margin-top: 5em; margin-right: -3em; margin-left: 3em; font-size: 12px; font-weight: normal !important; padding: 2px;">
			<h5 class="ui center red inverted top attached header" style="border-radius: 0px; font-family: monospace;">Post Comment</h5>
			<div class="ui center inverted attached segment" style="padding: 2em; border-radius: 0px; height: 207px;">
				<div class="ui inverted form">
					<textarea class="inverted" v-model="thread_reply" placeholder="Comment Body" @keyup.enter="post_comment(expanded_thread)" style="background: #00000052; color: white; margin-top: 0px; margin-bottom: 0px; height: 112px; border-radius: 0px; font-family: monospace;" ></textarea>
				</div>
				<div id="loader_div">
					<div id="loader" class="ui loader"></div>
				</div>
			</div>
		</div>
	</transition>
</div>
<style type="text/css">

.v-enter-active {
	animation: enter .5s;
}

.v-leave-active {
	animation: enter reverse .5s;
}

.thread-transitions-move {
	transition: transform .5s;
}


@keyframes enter {
	0% {
		transform: translateY(-50px);
		opacity: 0;
	}
	100% {
		transform: translateY(0px);
		opacity: 1;
	}
}

</style>

<script>

	let boardVue = new Vue({
		el: '#board-vue',
		data: {
			thread_head: '',
			thread_title: '',
			thread_reply: '',
			post_comment_box: false,
			single_thread_mode: false,
			expanded_thread: '',
			replies: [],
			threads: []
		},
		delimiters: ['${', '}'],
		methods: {
			add_reply: function() {
				boardVue._data.replies.push(this.threads[0].new_reply);
				boardVue._data.thread_reply = '';
				return false;
			},
			post_thread: function() {
				var thread_to_post = {
					title: this.thread_title,
					post: this.thread_head
				}
				this.threads.unshift({post: this.thread_head, title: this.thread_title, new_reply: ''});
				$.post('/api/threads/{{this.board}}', thread_to_post, function(response){
					boardVue._data.thread_head = '';
					boardVue._data.thread_title = '';
					var post_result_object = JSON.parse(response);
					
					boardVue._data.threads[0].id = post_result_object.id;
					boardVue._data.threads[0].thread_UUID = post_result_object.thread_UUID;
					boardVue._data.threads[0].created = post_result_object.created;
					boardVue._data.threads[0].updated = post_result_object.updated;
					boardVue._data.threads[0].expanded = false;
					boardVue._data.threads[0].visible = true;
					boardVue._data.threads[0].post_holder = '';

					return false;
				})
			},
			post_comment: function(uuid) {
				let current_thread = null;
				
				let comment_post = {
					comment: boardVue._data.thread_reply,
					thread_UUID: uuid
				}


				$.post('/api/thread/{{this.board}}/', comment_post, function(response){
					reply_response_object = JSON.parse(response);
					var post_result_object = JSON.parse(response);
					
					boardVue._data.replies = [];
					for(var i = 0;i<reply_response_object.length;i++){
						boardVue._data.replies.push(reply_response_object[i]);
					}
					boardVue._data.thread_reply = '';

					return false;
				})
			},
			expand_thread: function(uuid){
				const time_param = 50;

				if(boardVue._data.post_comment_box == false){
					boardVue._data.replies = [];
					var current_thread = null;
					for(var i = 0;i<boardVue._data.threads.length;i++){
						var thread = boardVue._data.threads[i];
						if(thread.thread_UUID == uuid){
							thread.expanded = true;
							thread.visible = true;
							current_thread = thread;
							boardVue._data.expanded_thread = uuid;
						} else {
							thread.expanded = false;
							thread.visible = false;
						}
					}
					setTimeout(function(){
						$.get('/api/thread/{{this.board}}/' + uuid, function(response){
							var response_object = JSON.parse(response);
							setTimeout(function(){
								boardVue._data.post_comment_box = true;
							}, response_object.length*time_param + 150);
							for(let i = 0;i<response_object.length; i++){
								setTimeout(function(){
									boardVue._data.replies.push(response_object[i]);
								}, i*time_param);
							}
						});

					}, 600);
					boardVue._data.single_thread_mode = true;
				} else {
					boardVue._data.expanded_thread = '';
					boardVue._data.post_comment_box = false;
					let reply_length = boardVue._data.replies.length+1;
					reply_length = reply_length -1;
					for(let i = 0;i<reply_length; i++){
						setTimeout(function(){
							boardVue._data.replies.pop();
						}, i*time_param);
					}
					setTimeout(function(){
						for(var i = 0;i<boardVue._data.threads.length;i++){
							var thread = boardVue._data.threads[i];
							thread.expanded = false;
							thread.visible = true;
						}
						boardVue._data.single_thread_mode = false;
					},reply_length*time_param + 600);
				}
			}
		},
		mounted: function() {
			let this_obj = this;
			$.get('/api/threads/{{this.board}}', function(response){
				var thread_object = JSON.parse(response);
				for(var i = 0;i<thread_object.threads.length;i++){
					boardVue._data.threads.push(
						{

							id: thread_object.threads[i].id,
							thread_UUID: thread_object.threads[i].thread_UUID,
							post: thread_object.threads[i].post, 
							title: thread_object.threads[i].title,
							created: thread_object.threads[i].created,
							updated: thread_object.threads[i].updated,
							expanded: false,
							visible: true,
							height_offset: 0,
							post_holder: '',
							title_holder: ''
						}
					)
				}
			})
		}
	});

		//prevents page refresh when you press enter while cursor is in the input field.
	$(document).ready(function(){
	
		$(document).keypress(function(e) {
			if(e.which == 13) {
				e.preventDefault();
			}
		});
	});

</script>